<?php

namespace ContainerBqXx3ZC;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getBounceService extends AppKernelProdContainer
{
    /*
     * Gets the public 'Mautic\EmailBundle\MonitoredEmail\Processor\Bounce' shared autowired service.
     *
     * @return \Mautic\EmailBundle\MonitoredEmail\Processor\Bounce
     */
    public static function do($container, $lazyLoad = true)
    {
        $a = ($container->privates['mailer.transports'] ?? self::getMailer_TransportsService($container));

        if (isset($container->services['Mautic\\EmailBundle\\MonitoredEmail\\Processor\\Bounce'])) {
            return $container->services['Mautic\\EmailBundle\\MonitoredEmail\\Processor\\Bounce'];
        }
        $b = ($container->services['Mautic\\EmailBundle\\Model\\EmailStatModel'] ?? self::getEmailStatModelService($container));

        if (isset($container->services['Mautic\\EmailBundle\\MonitoredEmail\\Processor\\Bounce'])) {
            return $container->services['Mautic\\EmailBundle\\MonitoredEmail\\Processor\\Bounce'];
        }
        $c = ($container->services['Mautic\\LeadBundle\\Model\\LeadModel'] ?? self::getLeadModelService($container));

        if (isset($container->services['Mautic\\EmailBundle\\MonitoredEmail\\Processor\\Bounce'])) {
            return $container->services['Mautic\\EmailBundle\\MonitoredEmail\\Processor\\Bounce'];
        }

        return $container->services['Mautic\\EmailBundle\\MonitoredEmail\\Processor\\Bounce'] = new \Mautic\EmailBundle\MonitoredEmail\Processor\Bounce($a, ($container->services['mautic.message.search.contact'] ?? $container->load('getMautic_Message_Search_ContactService')), $b, $c, ($container->services['translator'] ?? self::getTranslator2Service($container)), ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container)), ($container->services['Mautic\\LeadBundle\\Model\\DoNotContact'] ?? self::getDoNotContactService($container)));
    }
}
